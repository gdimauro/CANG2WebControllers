<% /* entity-associations.ejs */
%>    #region FIELD ASSOCIATIONS <%-entity.name%><%

/**
  * The type of the association of an endpoint connected to an entity
  */
  var EntityAssociationEndType = {
  zeroOrOne: 1,
  one: 2,
  oneOrMany: 3,
  zeroOrMany: 4
  };
  
  entity.associations.forEach(function(association) {
  
  var relatedEndpoint = association.fromEnd.entity === entity ? association.toEnd : association.fromEnd;
  var relatedEndpointMultiplicity = association.fromEnd.entity === entity
  ? association.toEndAssociationType : association.fromEndAssociationType;
  
  var relatedEndpointName = camelCase(relatedEndpoint.name);
  var relatedEndpointType = relatedEndpoint.entity.name;
  var isRelatedEndpointArray = relatedEndpointMultiplicity == EntityAssociationEndType.oneOrMany
  || relatedEndpointMultiplicity == EntityAssociationEndType.zeroOrMany 
  ? true
  : false;
  
  if(relatedEndpoint.isNavigable) {
%>

    // association: <%- association.name %> <% 
    if(!isRelatedEndpointArray) {
    %>
    private <%- relatedEndpointType %> _<%- relatedEndpointName %>; <%
    }
    else { %>
    private List<<%- relatedEndpointType %>> _<%- relatedEndpointName %>; <%
    }
    if(isRelatedEndpointArray) {
    %>
    
    // Add <%- association.name %>
    public <%-entity.name%> Add<%-pascalCase(relatedEndpointType)%>(<%- relatedEndpointType%> <%-relatedEndpointName%>) {
    _<%-relatedEndpointName%>.Add(<%-relatedEndpointName%>);
    return this;
  }
  
    // Remove <%- association.name %>
    public <%-entity.name%> Remove<%-pascalCase(relatedEndpointType)%>(<%- relatedEndpointType%> <%-relatedEndpointName%>) {
    _<%-relatedEndpointName%>.Remove(<%-relatedEndpointName%>);
    return this;
  } <%
    }
    %> <%
  }   
})
  
  
%>
    #endregion
